{
  "name": "Voting",
  "functions": [
    {
      "name": "add_to_tally_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "cast_vote",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "end_vote",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_vote",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82W206DQBCGl0OhSxGL95p9ggZ6Z+IFvoI+AUnRGyoJYPTx7dKZ+HfdGJMuqZPQHXa2838zy8kXQnjiaAH4aDxX0VicZ6XnLleBvP7heCRf0jlaBH7lSD9y359iAazSqE9bRvHQre5W0jVg23uzbwL0NcvCLcvU18hxfTpHDPxcK7OvIB7BGLvlmK7/hTjtKZ8j319Z/QuzzrX/S7c5tynl5F4ujZ5iPYnjenQOvpdD0EpAM51h71aUy6ODNSToXs2gm0JvkYO1AlhzBzFeZ+7HHL1Bq8BnLWTxLswixc9nsYR4DHO+8V+9B/cQz8j3LXkyyzqs/XqG2lGngnPWSoAh+wcssYVl7ZZlel7k4tt4f9bAwUw5cNw45vAMjk/QZS0Jfg5zvrEuJsbALWM5w/un1PyhOLXf7lPW1+8Ufm4MY9fXr81TU+88SBEa6fAzFf0AWsmfIyHM4WtfWywsn+8VjcV5VmIBwlKALX5L4wONz8d+qKHtRlWot8Nv3bbdR7PbKIwNav8+jGoY635UL323V+XmCz47d9CoDAAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_admin",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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inFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFeinFehnFehnFehnFehnFe9qL0WMM4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8M4L8c4L8c4L8c4L8c4L39ReqxjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnJdjnFdgnFdgnFdgnFdgnFe8KD02MM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4rMM4r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wnRb4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy5Vgy5Vgy5Vgy5VgyfWG6rXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXIsmXEsmXEsmXEsmXEsmb0w3dY4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw4lsw5lsw5lsw5lsw5lsxfmG7rHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEvmHEsWHEsWHEsWHEsWHEsWL0y3DY4lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lC44lS44lS44lS44lS44lyxem2ybHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkiXHkjWOJWscS9Y4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",
      "",
      "eJzNmN1qhDAQRt8l11LMzOTPVym9kHYLC4tbqneL7767Ra1gaqCRydyt8E08ojlf2Ju6XN/b4XztetXcVP1iVfN6U/1X2z2v+6H9HlRj0NpKnbqP50/vx0p9ni8n1eix2mS9MVPUB7sknYlEA87R4HGJEoxv1YPEiSHxYkiCGBJdy0HRclBADgrKQSE5KEYOihzVajmu1XJkq+XYFuTYFuTYFrJtG5yeoroGv88C4HEKA4Z6/xFxXtfTalk7cWeruRB3tscLcWdLvxB3dkMU4s6uk0Lc2d1TiDu7qMpwY7rVgtldX4OFGRwR13fYhtHN65J2S9T6CSbda4ww6WZjhEnXFSNMuoMYYdLFwgiTbgtGmHQFMMKkvc4Ik5Y1HwxJMjBJMjBJMjBJMjBJMjBJMjBJMjBJMjBJMjDxGphgPi4TwRomcrQmN5+sze8/Iw+YH27DK+vjuHm9fhw3bwX8j9vSlpu3LY7jjhoLtF/ekdnsZRMVS2Imuv/3Z2x07yVmot/93zPjeAdECp0/",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types; \ncontract Voting {\n// aztec core library imports\n    use dep::aztec::{\n\tcontext::{PrivateContext, Context}, note::{ \n\t    note_header::NoteHeader, utils as note_utils, // used to generate hashes and nullifiers\n\t},  \n    oracle::notes::check_nullifier_exists,\n    selector::compute_selector, // used to compute function selector for calling a function \n\t state_vars::{\n\t    map::Map, public_state::PublicState,\n\t}, types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n\t    bool_serialization::{BoolSerializationMethods,\n\t    BOOL_SERIALIZED_LEN},\n\t    aztec_address_serialization::{AztecAddressSerializationMethods,\n\t    AZTEC_ADDRESS_SERIALIZED_LEN},\n\t}, types::address::{AztecAddress}, hash::pedersen_hash, // hash for creating nullifier\n\n    }; \n    // value note used for compute_note_hash_and_nullifier()\n    use dep::value_note::{ \n\t    balance_utils, value_note::{\n\t\tValueNote, ValueNoteMethods, VALUE_NOTE_LEN,\n\t    },\n    }; \n\n    // address note used for computing nullifiers for the voter\n    use dep::address_note::{\n        address_note::{\n            AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN,\n        },\n    };\n\n   \n\n    use dep::safe_math::SafeU120; // like OZ safemath library \n\n    use crate::types::{SafeU120SerializationMethods, SAFE_U120_SERIALIZED_LEN};  // serialization methods for using u120\n\n// create storage struct\n// vars that will be stored in persistant state\nstruct Storage {\n    admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>, // admin can end vote\n    tally: Map<PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>>, // we will store vote as key and number of votes as value\n    voteEnded: PublicState<bool, BOOL_SERIALIZED_LEN>, // voteEnded is boolean\n} \n\n// implementation block for storage\n// required for now but soon to be abstracted\n// init function is called when you call storage from a function like storage.whatever\n    impl Storage {\n\tfn init(context: Context) -> Self {\n\t    Storage {\n\t\t admin: PublicState::new(\n\t\t    context, \n            1, // storage slot. this can be anything except 0. it is hashed, and hash on 0 = 0\n            AztecAddressSerializationMethods,\n\t\t), \n        tally: Map::new(\n\t\t    context, \n            2, \n            |context, slot| {\n\t\t\tPublicState::new(\n\t\t\t    context,\n                slot, \n                SafeU120SerializationMethods,\n\t\t\t)\n\t\t    },\n\t\t ),\n\t\t  voteEnded: PublicState::new(\n\t\t    context, \n            3, \n            BoolSerializationMethods,\n\t\t)\n\t    } }\n\t}\n\n    #[aztec(private)] // annotation to mark function as private and expose private context\n    fn constructor(admin: AztecAddress) { // called when contract is deployed \n        context.call_public_function( // we cannot update public state directly from private function but we can call public function (which queues it)\n            context.this_address(), // address that calls public function. here we are using contract address for privacy\n            compute_selector(\"set_admin((Field))\"), // selector of function to call\n            [admin.address]); // paramters for function we call\n    }\n\n    #[aztec(public)] // annotation to mark function as public and expose public context\n    fn set_admin(admin: AztecAddress) {\n\t    storage.admin.write(admin); \n        storage.voteEnded.write(false);\n    }\n\n    // struct OneUseOnly { // struct for defining what goes in our nullifier\n\t//     user: AztecAddress\n    // }\n\n\n    // impl OneUseOnly {  // impl block for nullifier struct \n\t//     pub fn new(user: AztecAddress) -> Self {  // create new struct for going inside nullifier\n\t//         Self { user }\n\t// }\n\n\t// fn spend_private(self, context: &mut PrivateContext) { \n\t//     let user = self.user.address; \n    //     let slot = 69; \n    //     let nullifier = dep::std::hash::pedersen_hash([user, slot]); // create nullifier with pedersen hash\n\t//     context.push_new_nullifier(nullifier, 0); // push nullifier to aztec, takes nullifier & nullified commitment (0 in our case)\n\t//     }\n    // }\n\n    #[aztec(private)]\n    fn cast_vote(vote: Field)  {\n    let user_address_note = AddressNote::new(context.msg_sender(), context.msg_sender()); // create nullifier with msg_sender\n\tlet nullifier = user_address_note.compute_nullifier();\n    check_nullifier_exists(nullifier);\n    context.push_new_nullifier(nullifier,0); // push nullifier\n\n        context.call_public_function(\n\t        context.this_address(),\n\t        compute_selector(\"add_to_tally_public(Field)\"), \n            [vote],\n\t   );\n\n    // let voter = AddressNote::new(context.msg_sender());\n\n    // take voter as address_note or convert into\n    // compute nullifier for this person and push \n    // is that it?\n\t\n    }\n\n    #[aztec(public)] \n    fn add_to_tally_public(vote: Field) {\n        assert(storage.voteEnded.read()==false, \"Vote has ended\"); // race condition\n        let amount = SafeU120::new(1); // can only add safeu20s to safeu120s so we make a new one with value of 1\n\tlet new_tally = storage.tally.at(vote).read().add(amount);\n        storage.tally.at(vote).write(new_tally);\n     }\n\n    #[aztec(public)] \n    fn end_vote() {\n        assert(storage.admin.read().eq(AztecAddress::new(context.msg_sender())),\n            \"Only admin can end votes\");\n        storage.voteEnded.write(true);\n    }\n\n    unconstrained fn get_vote(vote: Field) -> u120 {\n\t    storage.tally.at(vote).read().value\n    }\n\n\t// compute_note_hash_and_nullifier fn required in all contracts that manipulate private state\n\t// it is usually the exact same, but will differ if you use custom note types\n    unconstrained fn compute_note_hash_and_nullifier( contract_address:\n        Field, nonce: Field, storage_slot: Field, preimage: [Field;\n        VALUE_NOTE_LEN], ) -> [Field; 4] { let note_header =\n        NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods,\n        note_header, preimage)\n    }\n\n}\n",
        "path": "/Users/cat/Documents/Work/aztec-voting-workshop/contracts/voting/src/main.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "39": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "51": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "55": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "57": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "62": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "63": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "64": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "65": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "67": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/aztec/oracle/notes.nr"
      },
      "68": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/aztec/oracle/storage.nr"
      },
      "71": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "75": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "76": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "80": {
        "source": "struct AztecAddress {\n  address: Field\n}\n\nimpl AztecAddress {\n  pub fn new(address: Field) -> Self {\n    Self {\n      address\n    }\n  }\n\n  pub fn eq(self: Self, other: Self) -> bool {\n    self.address == other.address\n  }\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n\nstruct EthereumAddress {\n  address: Field\n}\n\nimpl EthereumAddress {\n  pub fn new(address: Field) -> Self {\n    // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n    let bytes = address.to_be_bytes(32);\n    for i in 0..12 {\n        assert(bytes[i] == 0, \"Value too large for an ethereum address\");\n    }\n    Self {\n      address\n    }\n  }\n\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}",
        "path": "/aztec/types/address.nr"
      },
      "84": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/aztec/types/type_serialization/bool_serialization.nr"
      },
      "87": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "88": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "92": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "93": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "94": {
        "source": "// docs:start:encrypted_import\nuse dep::aztec::log::emit_encrypted_log;\n// docs:end:encrypted_import\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal ADDRESS_NOTE_LEN: Field = 3;\n\n// Stores an address\nstruct AddressNote {\n    address: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl AddressNote {\n    pub fn new(address: Field, owner: Field) -> Self {\n        let randomness = rand();\n        AddressNote {\n            address,\n            owner,\n            randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; ADDRESS_NOTE_LEN]{\n        [self.address, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; ADDRESS_NOTE_LEN]) -> Self {\n        AddressNote {\n            address: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(AddressNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        // docs:start:encrypted\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n        // docs:end:encrypted\n    }\n}\n\nfn deserialize(serialized_note: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote::deserialize(serialized_note)\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN]{\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: AddressNote) {\n    note.broadcast(context, slot);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/address_note/address_note.nr"
      },
      "95": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\npub fn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120{value: fields[0] as u120}\n}\n\npub fn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};",
        "path": "/Users/cat/Documents/Work/aztec-voting-workshop/contracts/voting/src/types.nr"
      }
    }
  },
  "aztecNrVersion": "master"
}