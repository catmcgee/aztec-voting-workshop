{
  "name": "Voting",
  "functions": [
    {
      "name": "add_to_tally_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "cast_vote",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "end_vote",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_vote",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82W206DQBCGl0OhSxGL95p9ggZ6Z+IFvoI+AUnRGyoJYPTx7dKZ+HfdGJMuqZPQHXa2838zy8kXQnjiaAH4aDxX0VicZ6XnLleBvP7heCRf0jlaBH7lSD9y359iAazSqE9bRvHQre5W0jVg23uzbwL0NcvCLcvU18hxfTpHDPxcK7OvIB7BGLvlmK7/hTjtKZ8j319Z/QuzzrX/S7c5tynl5F4ujZ5iPYnjenQOvpdD0EpAM51h71aUy6ODNSToXs2gm0JvkYO1AlhzBzFeZ+7HHL1Bq8BnLWTxLswixc9nsYR4DHO+8V+9B/cQz8j3LXkyyzqs/XqG2lGngnPWSoAh+wcssYVl7ZZlel7k4tt4f9bAwUw5cNw45vAMjk/QZS0Jfg5zvrEuJsbALWM5w/un1PyhOLXf7lPW1+8Ufm4MY9fXr81TU+88SBEa6fAzFf0AWsmfIyHM4WtfWywsn+8VjcV5VmIBwlKALX5L4wONz8d+qKHtRlWot8Nv3bbdR7PbKIwNav8+jGoY635UL323V+XmCz47d9CoDAAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_admin",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJztnMFu5CgQht/F52gFFFCQV1ntIdqZkSJFmdUmt6jffZykAY+bpuTBqUqQT3EkwF//bn+mbDcv08PPf++e738+Pk23LxNMt3+/TE//3T2+/vf0fPf/83Srbqbvj9/mv6eb6cf9w/fpVp9uLlppABfPLeftoHNrCLXm1iibmlvjieYR3LlxDJCbWnP652ayXxHaMULPbTI0xPDn0L4GDVbrcw+wFpvozvlzU4elpYdKU5uTts6Xpm8cyMjhQhrVg1tyVJKO6QAajCXluDHlwPjpvE1NPbpVyrGbI+bB4TeOeXCtekcPmL4gEUz7UxqX0gZVPqVRbyC6FyTacizj+mOa3tG1UpDOXmUvYqwaGyymPuB82yboEwrGBf3b4FWzgtfJPoCBgAfM4czbCxRbbb6fX3VVsB/Kvptmdd2z29izizQEo5fsr3uoG3TbHhBbe6hbbNMeApi8h2gMmb8r3x27GPwMVNfZRwL5UL4QuBDPO5CpG1AQqG5CQaC6PAWB6rYVBNrB0PsC7aDdfYF2cOm+QDuod18gflMTQPymxnw1nredWQEBv6kJIH5TE0D8piaA+E1NAPGbmgDiNzUBxG9qAojf1AQQv6kJIAFTB5+BgoIVkBUwdRtIwNRtIAFTt4EETN0GEjB1G0jA1G0gAVO3gQRM3QYSMHUbiN3Uzqh8B8oZvb4d49hNTQGxm5oCYjc1BcRuagqI3dQUELupKSB2U1NA7KamgNhNTQEJmDo/L5y30a6AvICp20ACpm4DCZi6DSRg6jaQgKnbQAKmbgMJmLoNJGDqNpCAqdtA/KYGUy4dAGEFhPymJoD4TU0A8ZuaAOI3NQHEb2oCiN/UBBC/qQkgflMTQPymJoDYTe2Nz484Pai4AgrspvZgsACF9bUssJval3fg5u2LRwuB3dQ++JJQNBcJsZvaR2sKUFwXioHd1Kh0fhqECtdnWWA3Nar8hqlGHfUaiN3UaFR+MxtNWL/ZENhNjWDKIQPw7eYe0muj3pWji7WmDnTicPM8OTfe/LJjYL9YfIFM2K9XGzPBNLZfaKmaiVaxvOyjlTbtVKzSScJWLV+i3xphZL/CflyEWpdnO9oAEKkEAzmW2BMh+5xgvAjZZzHjRcg+7xovQv6Z4nAR8s9th4uQfzY+XISfvX74AhF+9nLjC0Q4UHUiFKFWR3nSn+FRn/RneBQo/RkeFUp/hkeJ0p/hUaP0ZzhSkQI5lXnbkbFAXk/DKtWT4UhVilSGI5UpUhmOVKcIZXhlmZ4jwy0ZjlSnSGU4Up0ileFIdYpUhiPVKVIZjlSnSGV41Cn9GR51Sn+GR53Sn+FRp3RnyL+Y3oAZHnVKf4Yj1SkY84KaOmBXLJ+89HCYfj6CFtqxNNfH/qs6LTP5XvYSxJ+7VGch7S7Vi267S/Ua0+oS63uxKh0F+5pk6gLvXap7aXep32Ei+lRNRfS5shJzft3YEotI2/xrDOvK8Dqeh7+2EPNOw9frzt2Gr5dkG4bPK9JbHy6Hv7Jw/F7DX1kPfpfh9ZWTerHY+2INB4fvix/XTx6ff/KEpvTx7tynevYQfeqnD9Wpev5c73Q6/QLo+3Cr",
      "",
      "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SxYeSxYeSxYeSxYeSxYvzbYNjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyULjyVLjyVLjyVLjyVLjyXLl2bbpseSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSpceSdY8l6x5L1j2WrHssWX9ptm33WLLusWTdY8m6x5J1jyXrHkvWPZaseyxZ91iy7rFk3WPJuseSdY8l6x5L1j2WrHssWfdYsu6xZN1jybrHknWPJeseS9Y9lqx7LFn3WLLusWTdY8m6x5J1jyXrHkvWPZaseyxZ91iy7rFk3WPJuseSdY8l6x5L1j2WrHssWfdYsu6xZN1jybrHknWPJeseS9Y9lqx7LFn3WLLusWTdY8m6x5J1jyXrHkvWPZaseyxZ91iy7rFk3WPJuseSdY8l6x5L1j2WrHssWfdYsu6xZN1jybrHknWPJeseS9Y9lqx7LFn3WLLusWTdY8m6x5J1jyXrHkvWPZaseyxZ91iy7rFk3WPJuseSdY8l6x5L1j2WrHssWfdYsu6x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L97v+tTouV683/XJy3O9eL/r04vnevF+1ycAz/Xi/a5P0Z3rxftdn0Q714v3uz7Nda4X73d9IupcL97v+lTRuV683/XJnHO9eL/r0y3nevF+1/+M7blevN/1CZRzvXi/61Mc53rxftcnIc714v2uTxOc68X7XX9F/lwv3u/6q9rneu1+6/orw+d67X7r+p85PNdr91tf2v3W9ddXz/Xa/db11yjP9dr91vXX+X5dv/5K3LlevN/1V7PO9eL9rr8idK4X73f9VZVzvXi/669MnOvF+12n++d68X7XCfm5Xrzfdcp8rhfvd53UnuvF+12nned68X7XieG5Xrzfdep2rhfvd51cnevF+11nUed68X7X/1zHuV683/U/eXGuF+93/e2az/Xi/Yr8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8qor8KkR+FSK/CpFfhcivQuRXIfKrEPlViPwqRH4VIr8KkV+FyK9C5Fch8qsQ+VWI/CpEfhUivwqRX4XIr0LkVyHyqxD5VYj8KkR+FSK/CpFfhcivQuRXIfKrEPlViPwqRH4VIr8KkV+FyK9C5Fch8qsQ+VWI/CpEfhUivwqRX4XIr0LkVyHyqxD5VYj8KkR+FSK/CpFfhcivQuRXIfKrEPlViPwqRH4VIr8KkV+FyK9C5Fch8qsQ+VWI/CpEfhUivwqRX4XIr0LkVyHyqxD5VYj8KkR+FSK/CpFfhcivQuRXIfKrEPlViPwqRH4VIr8KkV+FyK9C5Fch8qsQ+VWI/CpEfhUivwqRX4XIr0LkVyHyqxD5VYj8KkR+FSK/CpFfhcivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivmsivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivusivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsivhsiv7CUCrLlBu+G5QbviuUG747lBu+S5QbvluUG75rlBu+e5QbvouUG9aRFlzQ3qTYswa25Qb1rEWXODetMi0Job1JsWkdbcoN60CLXmBvWmRaw1N6g3LYKtuUG9aRFtzQ3qTYtwa25Qb1rEW3ODetMi4Job1JsWEdfcoN60CLnmBvWmRcw1N6g3LYKuuUG9aRF1zQ3qTYuw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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types; \ncontract Voting {\n// aztec core library imports\n    use dep::aztec::{\n\tcontext::{PrivateContext, Context}, note::{ \n\t    note_header::NoteHeader, utils as note_utils, // used to generate hashes and nullifiers\n\t},  \n    oracle::get_secret_key::get_secret_key,\n    selector::compute_selector, // used to compute function selector for calling a function \n\t state_vars::{\n\t    map::Map, public_state::PublicState,\n\t}, types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n\t    bool_serialization::{BoolSerializationMethods,\n\t    BOOL_SERIALIZED_LEN},\n\t    aztec_address_serialization::{AztecAddressSerializationMethods,\n\t    AZTEC_ADDRESS_SERIALIZED_LEN},\n\t}, types::address::{AztecAddress}, hash::pedersen_hash, // hash for creating nullifier\n\n    }; \n    // value note used for compute_note_hash_and_nullifier()\n    use dep::value_note::{ \n\t    balance_utils, value_note::{\n\t\tValueNote, ValueNoteMethods, VALUE_NOTE_LEN,\n\t    },\n    }; \n\n    // address note used for computing nullifiers for the voter\n    use dep::address_note::{\n        address_note::{\n            AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN,\n        },\n    };\n\n   \n\n    use dep::safe_math::SafeU120; // like OZ safemath library \n\n    use crate::types::{SafeU120SerializationMethods, SAFE_U120_SERIALIZED_LEN};  // serialization methods for using u120\n\n// create storage struct\n// vars that will be stored in persistant state\nstruct Storage {\n    admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>, // admin can end vote\n    tally: Map<PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>>, // we will store vote as key and number of votes as value\n    voteEnded: PublicState<bool, BOOL_SERIALIZED_LEN>, // voteEnded is boolean\n} \n\n// implementation block for storage\n// required for now but soon to be abstracted\n// init function is called when you call storage from a function like storage.whatever\n    impl Storage {\n\tfn init(context: Context) -> Self {\n\t    Storage {\n\t\t admin: PublicState::new(\n\t\t    context, \n            1, // storage slot. this can be anything except 0. it is hashed, and hash on 0 = 0\n            AztecAddressSerializationMethods,\n\t\t), \n        tally: Map::new(\n\t\t    context, \n            2, \n            |context, slot| {\n\t\t\tPublicState::new(\n\t\t\t    context,\n                slot, \n                SafeU120SerializationMethods,\n\t\t\t)\n\t\t    },\n\t\t ),\n\t\t  voteEnded: PublicState::new(\n\t\t    context, \n            3, \n            BoolSerializationMethods,\n\t\t)\n\t    } }\n\t}\n\n    #[aztec(private)] // annotation to mark function as private and expose private context\n    fn constructor(admin: AztecAddress) { // called when contract is deployed \n        context.call_public_function( // we cannot update public state directly from private function but we can call public function (which queues it)\n            context.this_address(), // address that calls public function. here we are using contract address for privacy\n            compute_selector(\"set_admin((Field))\"), // selector of function to call\n            [admin.address]); // paramters for function we call\n    }\n\n    #[aztec(public)] // annotation to mark function as public and expose public context\n    fn set_admin(admin: AztecAddress) {\n\t    storage.admin.write(admin); \n        storage.voteEnded.write(false);\n    }\n\n    #[aztec(private)]\n    fn cast_vote(vote: Field)  {\n        let secret = get_secret_key(context.msg_sender());\n        let nullifier = dep::std::hash::pedersen_hash(\n        [context.msg_sender(), secret.low, secret.high]);\n        context.push_new_nullifier(nullifier,0);\n        context.call_public_function(\n                context.this_address(),\n                compute_selector(\"add_to_tally_public(Field)\"), \n                [vote],\n        );\n        }\n\n    #[aztec(public)] \n    fn add_to_tally_public(vote: Field) {\n        assert(storage.voteEnded.read()==false, \"Vote has ended\"); // race condition\n        let amount = SafeU120::new(1); // can only add safeu20s to safeu120s so we make a new one with value of 1\n\tlet new_tally = storage.tally.at(vote).read().add(amount);\n        storage.tally.at(vote).write(new_tally);\n     }\n\n    #[aztec(public)] \n    fn end_vote() {\n        assert(storage.admin.read().eq(AztecAddress::new(context.msg_sender())),\n            \"Only admin can end votes\");\n        storage.voteEnded.write(true);\n    }\n\n    unconstrained fn get_vote(vote: Field) -> u120 {\n\t    storage.tally.at(vote).read().value\n    }\n\n\t// compute_note_hash_and_nullifier fn required in all contracts that manipulate private state\n\t// it is usually the exact same, but will differ if you use custom note types\n    unconstrained fn compute_note_hash_and_nullifier( contract_address:\n        Field, nonce: Field, storage_slot: Field, preimage: [Field;\n        VALUE_NOTE_LEN], ) -> [Field; 4] { let note_header =\n        NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods,\n        note_header, preimage)\n    }\n\n}\n",
        "path": "/Users/cat/Documents/Work/aztec-voting-workshop/contracts/voting/src/main.nr"
      },
      "6": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input : [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input : [Field; N], separator : u32) -> PedersenPoint {\n  let values = __pedersen_commitment_with_separator(input, separator);\n  PedersenPoint {\n     x: values[0],\n     y: values[1],\n  }\n}\n\npub fn pedersen_hash<N>(input : [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input : [Field; N], _separator : u32) -> Field {}\n\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n    \n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "39": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "51": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "55": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "57": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "62": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "63": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "65": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "68": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/aztec/oracle/storage.nr"
      },
      "71": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "75": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "76": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "80": {
        "source": "struct AztecAddress {\n  address: Field\n}\n\nimpl AztecAddress {\n  pub fn new(address: Field) -> Self {\n    Self {\n      address\n    }\n  }\n\n  pub fn eq(self: Self, other: Self) -> bool {\n    self.address == other.address\n  }\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n\nstruct EthereumAddress {\n  address: Field\n}\n\nimpl EthereumAddress {\n  pub fn new(address: Field) -> Self {\n    // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n    let bytes = address.to_be_bytes(32);\n    for i in 0..12 {\n        assert(bytes[i] == 0, \"Value too large for an ethereum address\");\n    }\n    Self {\n      address\n    }\n  }\n\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}",
        "path": "/aztec/types/address.nr"
      },
      "84": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/aztec/types/type_serialization/bool_serialization.nr"
      },
      "87": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "88": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "92": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "93": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "95": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\npub fn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120{value: fields[0] as u120}\n}\n\npub fn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};",
        "path": "/Users/cat/Documents/Work/aztec-voting-workshop/contracts/voting/src/types.nr"
      }
    }
  },
  "aztecNrVersion": "master"
}